import "pkg:/source/promises.bs"

namespace tests
	@SGNode("test")
	@suite
	class PromisesTests extends rooibos.BaseTestSuite

		'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		@describe("promise tests")
		'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		@it("create promise")
		sub _()
			promise = promises.create()
			m.assertTrue(promises.isPromise(promise))
		end sub

		@it("promise validation")
		sub _()
			m.assertTrue(promises.isPromise(promises.create()))
			promiseNode = createNode("node", { promiseState: 0 })
			m.assertTrue(promises.isPromise(promiseNode))
			notPromise = createNode()
			m.assertFalse(promises.isPromise(notPromise))
			m.assertFalse(promises.isPromise(invalid))
		end sub

		@it("promise settlement check")
		sub _()
			m.assertFalse(promises.isComplete(promises.create()))
			m.assertTrue(promises.isComplete(promises.resolve({})))
			m.assertTrue(promises.isComplete(promises.reject({})))
			m.assertFalse(promises.isComplete(createNode()))
			m.assertFalse(promises.isComplete(invalid))
		end sub

		@async
		@it("promise chain")
		sub _()
			promises.chain(promises.resolve(1)).then(sub(_)
				m.testSuite.assertTrue(_ = 1, _.tostr())
			end sub).catch(sub(_)
				m.testSuite.assertFalse(true, _.tostr())
			end sub).finally(sub()
				m.testSuite.done()
			end sub)
		end sub

		@async
		@it("resolving all promises")
		sub _()
			promises.chain(promises.all([
				promises.resolve(1)
				promises.resolve(2)
				promises.resolve(3)
			])).then(sub(_)
				msg = "resolved promise result should be [1,2,3]"
				m.testSuite.assertTrue(rooibos.common.eqArray(_, [1, 2, 3]), msg)
			end sub).catch(sub(_)
				m.testSuite.fail("should not get here")
			end sub).finally(sub()
				m.testSuite.done()
			end sub)
		end sub

		@async
		@it("rejecting all promises")
		sub _()
			promises.chain(promises.all([
				promises.resolve(1)
				promises.reject(2)
				promises.resolve(3)
			])).then(sub(_)
				m.testSuite.fail("should not get here")
			end sub).catch(sub(_)
				msg = "rejected promise result should be 2"
				m.testSuite.assertEqual(_, 2, msg)
			end sub).finally(sub()
				m.testSuite.done()
			end sub)
		end sub

		@async
		@it("thenable promise")
		sub _()
			promises.onThen(promises.resolve("thenable"), sub(_)
				m.testSuite.assertTrue(_ = "thenable", "resolved " + _)
				m.testSuite.done()
			end sub)
		end sub

		@async
		@it("catchable promise")
		sub _()
			promises.onCatch(promises.reject("catchable"), sub(_)
				m.testSuite.assertTrue(_ = "catchable", "rejected " + _)
				m.testSuite.done()
			end sub)
		end sub

		@async
		@it("finalable promise")
		sub _()
			promises.onFinally(promises.resolve("finalable"), sub()
				m.testSuite.assertTrue(true, "settled")
				m.testSuite.done()
			end sub)
		end sub

		@async
		@it("timer promise")
		function _()
			timerDurationInMillis = 125
			promise = sleepPromise(timerDurationInMillis / 1000)
			promises.onThen(promise, sub(_ as dynamic, ctx as dynamic)
				elapsedTimeInMillis = ctx.timespan.totalMilliseconds()
				? "elapsed time to resolve promise:" + elapsedTimeInMillis.tostr()
				tolerance = ctx.timerDurationInMillis * 0.1
				msg = "did not settle within 10% tolerance of timer duration"
				m.testSuite.assertTrue(ctx.timerDurationInMillis - tolerance <= elapsedTimeInMillis, msg)
				m.testSuite.assertTrue(ctx.timerDurationInMillis + tolerance >= elapsedTimeInMillis, msg)
				m.testSuite.done()
			end sub, {
				timespan: createObject("roTimespan")
				timerDurationInMillis: timerDurationInMillis
			})
		end function

		@async
		@it("resolved invalid")
		function _()
			promise = promises.resolve(invalid)
			promises.onThen(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, invalid)
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("reject invalid")
		function _()
			promise = promises.reject(invalid)
			promises.onCatch(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, invalid)
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("resolved integer")
		function _()
			promise = promises.resolve(1)
			promises.onThen(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, 1)
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("reject integer")
		function _()
			promise = promises.reject(1)
			promises.onCatch(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, 1)
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("resolved float")
		function _()
			promise = promises.resolve(1.1)
			promises.onThen(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, 1.1)
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("reject float")
		function _()
			promise = promises.reject(1.1)
			promises.onCatch(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, 1.1)
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("resolved boolean")
		function _()
			promise = promises.resolve(true)
			promises.onThen(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, true)
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("reject boolean")
		function _()
			promise = promises.reject(true)
			promises.onCatch(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, true)
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("resolved string")
		function _()
			promise = promises.resolve("my string")
			promises.onThen(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, "my string")
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("reject string")
		function _()
			promise = promises.reject("my string")
			promises.onCatch(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, "my string")
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("resolved array")
		function _()
			promise = promises.resolve([1,2,3])
			promises.onThen(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, [1,2,3])
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("reject array")
		function _()
			promise = promises.reject([1,2,3])
			promises.onCatch(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, [1,2,3])
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("resolved AA")
		function _()
			promise = promises.resolve({
				key: "value"
			})
			promises.onThen(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, {
					key: "value"
				})
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("reject AA")
		function _()
			promise = promises.reject({
				key: "value"
			})
			promises.onCatch(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, {
					key: "value"
				})
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("resolved AA with subtype")
		function _()
			promise = promises.resolve({
				subType: "Node"
			})
			promises.onThen(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, {
					subType: "Node"
				})
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("reject AA with subtype")
		function _()
			promise = promises.reject({
				subType: "Node"
			})
			promises.onCatch(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, {
					subType: "Node"
				})
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("resolved AA with children array")
		function _()
			promise = promises.resolve({
				children: [{ subType: "Node" }]
			})
			promises.onThen(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, {
					children: [{ subType: "Node" }]
				})
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("reject AA with children array")
		function _()
			promise = promises.reject({
				children: [{ subType: "Node" }]
			})
			promises.onCatch(promise, sub(result as dynamic)
				m.testSuite.assertEqual(result, {
					children: [{ subType: "Node" }]
				})
				m.testSuite.done()
			end sub)
		end function

		@async
		@it("resolved SgNode")
		function _()
			testNode = createNode("Node")
			promise = promises.resolve(testNode)
			promises.onThen(promise, sub(result as dynamic, context as dynamic)
				m.testSuite.assertTrue(context.isSameNode(result))
				m.testSuite.done()
			end sub, testNode)
		end function

		@async
		@it("reject SgNode")
		function _()
			testNode = createNode("Node")
			promise = promises.reject(testNode)
			promises.onCatch(promise, sub(result as dynamic, context as dynamic)
				m.testSuite.assertTrue(context.isSameNode(result))
				m.testSuite.done()
			end sub, testNode)
		end function

	end class
end namespace

function createNode(nodeType = "Node" as string, fields = {} as dynamic) as object
	node = createObject("roSGNode", nodeType)
	node.update(fields, true)
	return node
end function

function sleepPromise(duration = 0.0001 as float) as dynamic
	promise = promises.create()
	promises.internal.delay(sub(promise as dynamic)
		promises.resolve(true, promise)
	end sub, promise, duration)
	return promise
end function
